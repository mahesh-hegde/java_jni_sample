// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../_init.dart";

/// from: java.util.jar.Attributes
///
/// The Attributes class maps Manifest attribute names to associated string
/// values. Valid attribute names are case-insensitive, are restricted to
/// the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed 70
/// characters in length. Attribute values can contain any characters and
/// will be UTF8-encoded when written to the output stream.  See the
/// <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/jar/jar.html">JAR File Specification</a>
/// for more information about valid attribute names and values.
///@author David Connelly
///@see Manifest
///@since 1.2
class Attributes extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Attributes.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf(r"java/util/jar/Attributes");

  /// The type which includes information such as the signature of this class.
  static const type = $AttributesType();
  static final _id_map = jniAccessors.getFieldIDOf(
    _classRef,
    r"map",
    r"Ljava/util/Map;",
  );

  /// from: protected java.util.Map<java.lang.Object,java.lang.Object> map
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The attribute name-value mappings.
  jni.JObject get map => const jni.JObjectType().fromRef(jniAccessors
      .getField(reference, _id_map, jni.JniCallType.objectType)
      .object);

  /// from: protected java.util.Map<java.lang.Object,java.lang.Object> map
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// The attribute name-value mappings.
  set map(jni.JObject value) =>
      jniEnv.SetObjectField(reference, _id_map, value.reference);

  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new, empty Attributes object with default size.
  Attributes()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"(I)V");

  /// from: public void <init>(int size)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new, empty Attributes object with the specified
  /// initial size.
  ///@param size the initial number of attributes
  Attributes.ctor1(int size)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [jni.JValueInt(size)]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/util/jar/Attributes;)V");

  /// from: public void <init>(java.util.jar.Attributes attr)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new Attributes object with the same attribute name-value
  /// mappings as in the specified Attributes.
  ///@param attr the specified Attributes
  Attributes.ctor2(Attributes attr)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [attr.reference]).object);

  static final _id_get0 = jniAccessors.getMethodIDOf(
      _classRef, r"get", r"(Ljava/lang/Object;)Ljava/lang/Object;");

  /// from: public java.lang.Object get(java.lang.Object name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the value of the specified attribute name, or null if the
  /// attribute name was not found.
  ///@param name the attribute name
  ///@return the value of the specified attribute name, or null if
  ///         not found.
  jni.JObject get0(jni.JObject name) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_get0, jni.JniCallType.objectType, [name.reference]).object);

  static final _id_getValue = jniAccessors.getMethodIDOf(
      _classRef, r"getValue", r"(Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String getValue(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the value of the specified attribute name, specified as
  /// a string, or null if the attribute was not found. The attribute
  /// name is case-insensitive.
  ///
  /// This method is defined as:
  /// <pre>
  ///      return (String)get(new Attributes.Name((String)name));
  /// </pre>
  ///@param name the attribute name as a string
  ///@return the String value of the specified attribute name, or null if
  ///         not found.
  ///@throws IllegalArgumentException if the attribute name is invalid
  jni.JString getValue(jni.JString name) =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getValue, jni.JniCallType.objectType, [name.reference]).object);

  static final _id_getValue1 = jniAccessors.getMethodIDOf(_classRef,
      r"getValue", r"(Ljava/util/jar/Attributes$Name;)Ljava/lang/String;");

  /// from: public java.lang.String getValue(java.util.jar.Attributes.Name name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the value of the specified Attributes.Name, or null if the
  /// attribute was not found.
  ///
  /// This method is defined as:
  /// <pre>
  ///     return (String)get(name);
  /// </pre>
  ///@param name the Attributes.Name object
  ///@return the String value of the specified Attribute.Name, or null if
  ///         not found.
  jni.JString getValue1(Attributes_Name name) =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_getValue1, jni.JniCallType.objectType, [name.reference]).object);

  static final _id_put = jniAccessors.getMethodIDOf(_classRef, r"put",
      r"(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;");

  /// from: public java.lang.Object put(java.lang.Object name, java.lang.Object value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Associates the specified value with the specified attribute name
  /// (key) in this Map. If the Map previously contained a mapping for
  /// the attribute name, the old value is replaced.
  ///@param name the attribute name
  ///@param value the attribute value
  ///@return the previous value of the attribute, or null if none
  ///@exception ClassCastException if the name is not a Attributes.Name
  ///            or the value is not a String
  jni.JObject put(jni.JObject name, jni.JObject value) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_put,
          jni.JniCallType.objectType,
          [name.reference, value.reference]).object);

  static final _id_putValue = jniAccessors.getMethodIDOf(_classRef, r"putValue",
      r"(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;");

  /// from: public java.lang.String putValue(java.lang.String name, java.lang.String value)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Associates the specified value with the specified attribute name,
  /// specified as a String. The attributes name is case-insensitive.
  /// If the Map previously contained a mapping for the attribute name,
  /// the old value is replaced.
  ///
  /// This method is defined as:
  /// <pre>
  ///      return (String)put(new Attributes.Name(name), value);
  /// </pre>
  ///@param name the attribute name as a string
  ///@param value the attribute value
  ///@return the previous value of the attribute, or null if none
  ///@exception IllegalArgumentException if the attribute name is invalid
  jni.JString putValue(jni.JString name, jni.JString value) =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_putValue,
          jni.JniCallType.objectType,
          [name.reference, value.reference]).object);

  static final _id_remove = jniAccessors.getMethodIDOf(
      _classRef, r"remove", r"(Ljava/lang/Object;)Ljava/lang/Object;");

  /// from: public java.lang.Object remove(java.lang.Object name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Removes the attribute with the specified name (key) from this Map.
  /// Returns the previous attribute value, or null if none.
  ///@param name attribute name
  ///@return the previous value of the attribute, or null if none
  jni.JObject remove(jni.JObject name) =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(reference,
          _id_remove, jni.JniCallType.objectType, [name.reference]).object);

  static final _id_containsValue = jniAccessors.getMethodIDOf(
      _classRef, r"containsValue", r"(Ljava/lang/Object;)Z");

  /// from: public boolean containsValue(java.lang.Object value)
  ///
  /// Returns true if this Map maps one or more attribute names (keys)
  /// to the specified value.
  ///@param value the attribute value
  ///@return true if this Map maps one or more attribute names to
  ///         the specified value
  bool containsValue(jni.JObject value) => jniAccessors.callMethodWithArgs(
      reference,
      _id_containsValue,
      jni.JniCallType.booleanType,
      [value.reference]).boolean;

  static final _id_containsKey = jniAccessors.getMethodIDOf(
      _classRef, r"containsKey", r"(Ljava/lang/Object;)Z");

  /// from: public boolean containsKey(java.lang.Object name)
  ///
  /// Returns true if this Map contains the specified attribute name (key).
  ///@param name the attribute name
  ///@return true if this Map contains the specified attribute name
  bool containsKey(jni.JObject name) => jniAccessors.callMethodWithArgs(
      reference,
      _id_containsKey,
      jni.JniCallType.booleanType,
      [name.reference]).boolean;

  static final _id_putAll =
      jniAccessors.getMethodIDOf(_classRef, r"putAll", r"(Ljava/util/Map;)V");

  /// from: public void putAll(java.util.Map<?,?> attr)
  ///
  /// Copies all of the attribute name-value mappings from the specified
  /// Attributes to this Map. Duplicate mappings will be replaced.
  ///@param attr the Attributes to be stored in this map
  ///@exception ClassCastException if attr is not an Attributes
  void putAll(jni.JObject attr) => jniAccessors.callMethodWithArgs(reference,
      _id_putAll, jni.JniCallType.voidType, [attr.reference]).check();

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, r"clear", r"()V");

  /// from: public void clear()
  ///
  /// Removes all attributes from this Map.
  void clear() => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniCallType.voidType, []).check();

  static final _id_size =
      jniAccessors.getMethodIDOf(_classRef, r"size", r"()I");

  /// from: public int size()
  ///
  /// Returns the number of attributes in this Map.
  int size() => jniAccessors.callMethodWithArgs(
      reference, _id_size, jni.JniCallType.intType, []).integer;

  static final _id_isEmpty =
      jniAccessors.getMethodIDOf(_classRef, r"isEmpty", r"()Z");

  /// from: public boolean isEmpty()
  ///
  /// Returns true if this Map contains no attributes.
  bool isEmpty() => jniAccessors.callMethodWithArgs(
      reference, _id_isEmpty, jni.JniCallType.booleanType, []).boolean;

  static final _id_keySet =
      jniAccessors.getMethodIDOf(_classRef, r"keySet", r"()Ljava/util/Set;");

  /// from: public java.util.Set<java.lang.Object> keySet()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Set view of the attribute names (keys) contained in this Map.
  jni.JObject keySet() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_keySet, jni.JniCallType.objectType, []).object);

  static final _id_values = jniAccessors.getMethodIDOf(
      _classRef, r"values", r"()Ljava/util/Collection;");

  /// from: public java.util.Collection<java.lang.Object> values()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Collection view of the attribute values contained in this Map.
  jni.JObject values() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_values, jni.JniCallType.objectType, []).object);

  static final _id_entrySet =
      jniAccessors.getMethodIDOf(_classRef, r"entrySet", r"()Ljava/util/Set;");

  /// from: public java.util.Set<java.util.Map.Entry<java.lang.Object,java.lang.Object>> entrySet()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Collection view of the attribute name-value mappings
  /// contained in this Map.
  jni.JObject entrySet() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_entrySet, jni.JniCallType.objectType, []).object);

  static final _id_equals1 = jniAccessors.getMethodIDOf(
      _classRef, r"equals", r"(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  ///
  /// Compares the specified Attributes object with this Map for equality.
  /// Returns true if the given object is also an instance of Attributes
  /// and the two Attributes objects represent the same mappings.
  ///@param o the Object to be compared
  ///@return true if the specified Object is equal to this Map
  bool equals1(jni.JObject o) => jniAccessors.callMethodWithArgs(reference,
      _id_equals1, jni.JniCallType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, r"hashCode", r"()I");

  /// from: public int hashCode()
  ///
  /// Returns the hash code value for this Map.
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniCallType.intType, []).integer;

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, r"clone", r"()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a copy of the Attributes, implemented as follows:
  /// <pre>
  ///     public Object clone() { return new Attributes(this); }
  /// </pre>
  /// Since the attribute names and values are themselves immutable,
  /// the Attributes returned can be safely modified without affecting
  /// the original.
  jni.JObject clone() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniCallType.objectType, []).object);
}

class $AttributesType extends jni.JObjType<Attributes> {
  const $AttributesType();

  @override
  String get signature => r"Ljava/util/jar/Attributes;";

  @override
  Attributes fromRef(jni.JObjectPtr ref) => Attributes.fromRef(ref);
}

/// from: java.util.jar.Attributes$Name
///
/// The Attributes.Name class represents an attribute name stored in
/// this Map. Valid attribute names are case-insensitive, are restricted
/// to the ASCII characters in the set [0-9a-zA-Z_-], and cannot exceed
/// 70 characters in length. Attribute values can contain any characters
/// and will be UTF8-encoded when written to the output stream.  See the
/// <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/jar/jar.html">JAR File Specification</a>
/// for more information about valid attribute names and values.
class Attributes_Name extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Attributes_Name.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"java/util/jar/Attributes$Name");

  /// The type which includes information such as the signature of this class.
  static const type = $Attributes_NameType();
  static final _id_CLASS_PATH = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"CLASS_PATH",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name CLASS_PATH
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Class-Path</code>
  /// manifest attribute. Bundled extensions can use this attribute
  /// to find other JAR files containing needed classes.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/jar/jar.html\#classpath">
  ///      JAR file specification</a>
  static Attributes_Name get CLASS_PATH =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(_classRef, _id_CLASS_PATH, jni.JniCallType.objectType)
          .object);

  static final _id_CONTENT_TYPE = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"CONTENT_TYPE",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name CONTENT_TYPE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Content-Type</code>
  /// manifest attribute.
  static Attributes_Name get CONTENT_TYPE =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_CONTENT_TYPE, jni.JniCallType.objectType)
          .object);

  static final _id_EXTENSION_INSTALLATION = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"EXTENSION_INSTALLATION",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name EXTENSION_INSTALLATION
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Extension-Name</code> manifest attribute
  /// used for declaring dependencies on installed extensions.
  ///@deprecated Extension mechanism will be removed in a future release.
  ///             Use class path instead.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/extensions/spec.html\#dependency">
  ///      Installed extension dependency</a>
  static Attributes_Name get EXTENSION_INSTALLATION =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_EXTENSION_INSTALLATION, jni.JniCallType.objectType)
          .object);

  static final _id_EXTENSION_LIST = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"EXTENSION_LIST",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name EXTENSION_LIST
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Extension-List</code> manifest attribute
  /// used for declaring dependencies on installed extensions.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/extensions/spec.html\#dependency">
  ///      Installed extension dependency</a>
  static Attributes_Name get EXTENSION_LIST =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_EXTENSION_LIST, jni.JniCallType.objectType)
          .object);

  static final _id_EXTENSION_NAME = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"EXTENSION_NAME",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name EXTENSION_NAME
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Extension-Name</code> manifest attribute
  /// used for declaring dependencies on installed extensions.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/extensions/spec.html\#dependency">
  ///      Installed extension dependency</a>
  static Attributes_Name get EXTENSION_NAME =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_EXTENSION_NAME, jni.JniCallType.objectType)
          .object);

  static final _id_IMPLEMENTATION_TITLE = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"IMPLEMENTATION_TITLE",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name IMPLEMENTATION_TITLE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Implementation-Title</code>
  /// manifest attribute used for package versioning.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/versioning/spec/versioning2.html\#wp90779">
  ///      Java Product Versioning Specification</a>
  static Attributes_Name get IMPLEMENTATION_TITLE =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_IMPLEMENTATION_TITLE, jni.JniCallType.objectType)
          .object);

  static final _id_IMPLEMENTATION_URL = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"IMPLEMENTATION_URL",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name IMPLEMENTATION_URL
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Implementation-URL</code>
  /// manifest attribute used for package versioning.
  ///@deprecated Extension mechanism will be removed in a future release.
  ///             Use class path instead.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/extensions/versioning.html\#applet">
  ///      Optional Package Versioning</a>
  static Attributes_Name get IMPLEMENTATION_URL =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_IMPLEMENTATION_URL, jni.JniCallType.objectType)
          .object);

  static final _id_IMPLEMENTATION_VENDOR = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"IMPLEMENTATION_VENDOR",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name IMPLEMENTATION_VENDOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Implementation-Vendor</code>
  /// manifest attribute used for package versioning.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/versioning/spec/versioning2.html\#wp90779">
  ///      Java Product Versioning Specification</a>
  static Attributes_Name get IMPLEMENTATION_VENDOR =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_IMPLEMENTATION_VENDOR, jni.JniCallType.objectType)
          .object);

  static final _id_IMPLEMENTATION_VENDOR_ID = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"IMPLEMENTATION_VENDOR_ID",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name IMPLEMENTATION_VENDOR_ID
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Implementation-Vendor-Id</code>
  /// manifest attribute used for package versioning.
  ///@deprecated Extension mechanism will be removed in a future release.
  ///             Use class path instead.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/extensions/versioning.html\#applet">
  ///      Optional Package Versioning</a>
  static Attributes_Name get IMPLEMENTATION_VENDOR_ID =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(_classRef, _id_IMPLEMENTATION_VENDOR_ID,
              jni.JniCallType.objectType)
          .object);

  static final _id_IMPLEMENTATION_VERSION = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"IMPLEMENTATION_VERSION",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name IMPLEMENTATION_VERSION
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Implementation-Version</code>
  /// manifest attribute used for package versioning.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/versioning/spec/versioning2.html\#wp90779">
  ///      Java Product Versioning Specification</a>
  static Attributes_Name get IMPLEMENTATION_VERSION =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_IMPLEMENTATION_VERSION, jni.JniCallType.objectType)
          .object);

  static final _id_MAIN_CLASS = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"MAIN_CLASS",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name MAIN_CLASS
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Main-Class</code> manifest
  /// attribute used for launching applications packaged in JAR files.
  /// The <code>Main-Class</code> attribute is used in conjunction
  /// with the <code>-jar</code> command-line option of the
  /// <tt>java</tt> application launcher.
  static Attributes_Name get MAIN_CLASS =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(_classRef, _id_MAIN_CLASS, jni.JniCallType.objectType)
          .object);

  static final _id_MANIFEST_VERSION = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"MANIFEST_VERSION",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name MANIFEST_VERSION
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Manifest-Version</code>
  /// manifest attribute. This attribute indicates the version number
  /// of the manifest standard to which a JAR file's manifest conforms.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/jar/jar.html\#JAR Manifest">
  ///      Manifest and Signature Specification</a>
  static Attributes_Name get MANIFEST_VERSION =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_MANIFEST_VERSION, jni.JniCallType.objectType)
          .object);

  static final _id_SEALED = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"SEALED",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name SEALED
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Sealed</code> manifest attribute
  /// used for sealing.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/jar/jar.html\#sealing">
  ///      Package Sealing</a>
  static Attributes_Name get SEALED =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(_classRef, _id_SEALED, jni.JniCallType.objectType)
          .object);

  static final _id_SIGNATURE_VERSION = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"SIGNATURE_VERSION",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name SIGNATURE_VERSION
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Signature-Version</code>
  /// manifest attribute used when signing JAR files.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/jar/jar.html\#JAR Manifest">
  ///      Manifest and Signature Specification</a>
  static Attributes_Name get SIGNATURE_VERSION =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_SIGNATURE_VERSION, jni.JniCallType.objectType)
          .object);

  static final _id_SPECIFICATION_TITLE = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"SPECIFICATION_TITLE",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name SPECIFICATION_TITLE
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Specification-Title</code>
  /// manifest attribute used for package versioning.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/versioning/spec/versioning2.html\#wp90779">
  ///      Java Product Versioning Specification</a>
  static Attributes_Name get SPECIFICATION_TITLE =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_SPECIFICATION_TITLE, jni.JniCallType.objectType)
          .object);

  static final _id_SPECIFICATION_VENDOR = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"SPECIFICATION_VENDOR",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name SPECIFICATION_VENDOR
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Specification-Vendor</code>
  /// manifest attribute used for package versioning.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/versioning/spec/versioning2.html\#wp90779">
  ///      Java Product Versioning Specification</a>
  static Attributes_Name get SPECIFICATION_VENDOR =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_SPECIFICATION_VENDOR, jni.JniCallType.objectType)
          .object);

  static final _id_SPECIFICATION_VERSION = jniAccessors.getStaticFieldIDOf(
    _classRef,
    r"SPECIFICATION_VERSION",
    r"Ljava/util/jar/Attributes$Name;",
  );

  /// from: static public final java.util.jar.Attributes.Name SPECIFICATION_VERSION
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// <code>Name</code> object for <code>Specification-Version</code>
  /// manifest attribute used for package versioning.
  ///@see <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/versioning/spec/versioning2.html\#wp90779">
  ///      Java Product Versioning Specification</a>
  static Attributes_Name get SPECIFICATION_VERSION =>
      const $Attributes_NameType().fromRef(jniAccessors
          .getStaticField(
              _classRef, _id_SPECIFICATION_VERSION, jni.JniCallType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new attribute name using the given string name.
  ///@param name the attribute string name
  ///@exception IllegalArgumentException if the attribute name was
  ///            invalid
  ///@exception NullPointerException if the attribute name was null
  Attributes_Name(jni.JString name)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [name.reference]).object);

  static final _id_equals1 = jniAccessors.getMethodIDOf(
      _classRef, r"equals", r"(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  ///
  /// Compares this attribute name to another for equality.
  ///@param o the object to compare
  ///@return true if this attribute name is equal to the
  ///         specified attribute object
  bool equals1(jni.JObject o) => jniAccessors.callMethodWithArgs(reference,
      _id_equals1, jni.JniCallType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, r"hashCode", r"()I");

  /// from: public int hashCode()
  ///
  /// Computes the hash value for this attribute name.
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniCallType.intType, []).integer;

  static final _id_toString1 = jniAccessors.getMethodIDOf(
      _classRef, r"toString", r"()Ljava/lang/String;");

  /// from: public java.lang.String toString()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the attribute name as a String.
  jni.JString toString1() =>
      const jni.JStringType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_toString1, jni.JniCallType.objectType, []).object);
}

class $Attributes_NameType extends jni.JObjType<Attributes_Name> {
  const $Attributes_NameType();

  @override
  String get signature => r"Ljava/util/jar/Attributes$Name;";

  @override
  Attributes_Name fromRef(jni.JObjectPtr ref) => Attributes_Name.fromRef(ref);
}
