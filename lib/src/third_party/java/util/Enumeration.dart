// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../_init.dart";

/// from: java.util.Enumeration
///
/// An object that implements the Enumeration interface generates a
/// series of elements, one at a time. Successive calls to the
/// <code>nextElement</code> method return successive elements of the
/// series.
///
/// For example, to print all elements of a <tt>Vector&lt;E&gt;</tt> <i>v</i>:
/// <pre>
///   for (Enumeration&lt;E&gt; e = v.elements(); e.hasMoreElements();)
///       System.out.println(e.nextElement());</pre>
///
/// Methods are provided to enumerate through the elements of a
/// vector, the keys of a hashtable, and the values in a hashtable.
/// Enumerations are also used to specify the input streams to a
/// <code>SequenceInputStream</code>.
///
/// NOTE: The functionality of this interface is duplicated by the Iterator
/// interface.  In addition, Iterator adds an optional remove operation, and
/// has shorter method names.  New implementations should consider using
/// Iterator in preference to Enumeration.
///@see java.util.Iterator
///@see java.io.SequenceInputStream
///@see java.util.Enumeration\#nextElement()
///@see java.util.Hashtable
///@see java.util.Hashtable\#elements()
///@see java.util.Hashtable\#keys()
///@see java.util.Vector
///@see java.util.Vector\#elements()
///@author Lee Boynton
///@since JDK1.0
class Enumeration<E extends jni.JObject> extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type($E);

  final jni.JObjType<E> $E;

  Enumeration.fromRef(
    this.$E,
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf(r"java/util/Enumeration");

  /// The type which includes information such as the signature of this class.
  static $EnumerationType<E> type<E extends jni.JObject>(
    jni.JObjType<E> $E,
  ) {
    return $EnumerationType(
      $E,
    );
  }

  static final _id_hasMoreElements =
      jniAccessors.getMethodIDOf(_classRef, r"hasMoreElements", r"()Z");

  /// from: public abstract boolean hasMoreElements()
  ///
  /// Tests if this enumeration contains more elements.
  ///@return <code>true</code> if and only if this enumeration object
  ///           contains at least one more element to provide;
  ///          <code>false</code> otherwise.
  bool hasMoreElements() => jniAccessors.callMethodWithArgs(
      reference, _id_hasMoreElements, jni.JniCallType.booleanType, []).boolean;

  static final _id_nextElement = jniAccessors.getMethodIDOf(
      _classRef, r"nextElement", r"()Ljava/lang/Object;");

  /// from: public abstract E nextElement()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the next element of this enumeration if this enumeration
  /// object has at least one more element to provide.
  ///@return the next element of this enumeration.
  ///@exception NoSuchElementException if no more elements exist.
  E nextElement() => $E.fromRef(jniAccessors.callMethodWithArgs(
      reference, _id_nextElement, jni.JniCallType.objectType, []).object);
}

class $EnumerationType<E extends jni.JObject>
    extends jni.JObjType<Enumeration<E>> {
  final jni.JObjType<E> $E;

  const $EnumerationType(
    this.$E,
  );

  @override
  String get signature => r"Ljava/util/Enumeration;";

  @override
  Enumeration<E> fromRef(jni.JObjectPtr ref) => Enumeration.fromRef($E, ref);
}
