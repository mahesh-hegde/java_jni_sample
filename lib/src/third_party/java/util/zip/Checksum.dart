// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../_init.dart";

/// from: java.util.zip.Checksum
///
/// An interface representing a data checksum.
///@author David Connelly
class Checksum extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Checksum.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf(r"java/util/zip/Checksum");

  /// The type which includes information such as the signature of this class.
  static const type = $ChecksumType();
  static final _id_update =
      jniAccessors.getMethodIDOf(_classRef, r"update", r"(I)V");

  /// from: public abstract void update(int b)
  ///
  /// Updates the current checksum with the specified byte.
  ///@param b the byte to update the checksum with
  void update(int b) => jniAccessors.callMethodWithArgs(reference, _id_update,
      jni.JniCallType.voidType, [jni.JValueInt(b)]).check();

  static final _id_update1 =
      jniAccessors.getMethodIDOf(_classRef, r"update", r"([BII)V");

  /// from: public abstract void update(byte[] b, int off, int len)
  ///
  /// Updates the current checksum with the specified array of bytes.
  ///@param b the byte array to update the checksum with
  ///@param off the start offset of the data
  ///@param len the number of bytes to use for the update
  void update1(jni.JArray<jni.JByte> b, int off, int len) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_update1,
          jni.JniCallType.voidType,
          [b.reference, jni.JValueInt(off), jni.JValueInt(len)]).check();

  static final _id_getValue =
      jniAccessors.getMethodIDOf(_classRef, r"getValue", r"()J");

  /// from: public abstract long getValue()
  ///
  /// Returns the current checksum value.
  ///@return the current checksum value
  int getValue() => jniAccessors.callMethodWithArgs(
      reference, _id_getValue, jni.JniCallType.longType, []).long;

  static final _id_reset =
      jniAccessors.getMethodIDOf(_classRef, r"reset", r"()V");

  /// from: public abstract void reset()
  ///
  /// Resets the checksum to its initial value.
  void reset() => jniAccessors.callMethodWithArgs(
      reference, _id_reset, jni.JniCallType.voidType, []).check();
}

class $ChecksumType extends jni.JObjType<Checksum> {
  const $ChecksumType();

  @override
  String get signature => r"Ljava/util/zip/Checksum;";

  @override
  Checksum fromRef(jni.JObjectPtr ref) => Checksum.fromRef(ref);
}
