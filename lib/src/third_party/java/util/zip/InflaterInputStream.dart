// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Inflater.dart" as inflater_;

import "../../io/InputStream.dart" as inputstream_;
import "../../../_init.dart";

/// from: java.util.zip.InflaterInputStream
///
/// This class implements a stream filter for uncompressing data in the
/// "deflate" compression format. It is also used as the basis for other
/// decompression filters, such as GZIPInputStream.
///@see Inflater
///@author David Connelly
class InflaterInputStream extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  InflaterInputStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"java/util/zip/InflaterInputStream");

  /// The type which includes information such as the signature of this class.
  static const type = $InflaterInputStreamType();
  static final _id_buf = jniAccessors.getFieldIDOf(
    _classRef,
    r"buf",
    r"[B",
  );

  /// from: protected byte[] buf
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Input buffer for decompression.
  jni.JArray<jni.JByte> get buf =>
      const jni.JArrayType(jni.JByteType()).fromRef(jniAccessors
          .getField(reference, _id_buf, jni.JniCallType.objectType)
          .object);

  /// from: protected byte[] buf
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Input buffer for decompression.
  set buf(jni.JArray<jni.JByte> value) =>
      jniEnv.SetObjectField(reference, _id_buf, value.reference);

  static final _id_closed = jniAccessors.getFieldIDOf(
    _classRef,
    r"closed",
    r"Z",
  );

  /// from: protected boolean closed
  bool get closed => jniAccessors
      .getField(reference, _id_closed, jni.JniCallType.booleanType)
      .boolean;

  /// from: protected boolean closed
  set closed(bool value) =>
      jniEnv.SetBooleanField(reference, _id_closed, value ? 1 : 0);

  static final _id_inf = jniAccessors.getFieldIDOf(
    _classRef,
    r"inf",
    r"Ljava/util/zip/Inflater;",
  );

  /// from: protected java.util.zip.Inflater inf
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Decompressor for this stream.
  inflater_.Inflater get inf =>
      const inflater_.$InflaterType().fromRef(jniAccessors
          .getField(reference, _id_inf, jni.JniCallType.objectType)
          .object);

  /// from: protected java.util.zip.Inflater inf
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Decompressor for this stream.
  set inf(inflater_.Inflater value) =>
      jniEnv.SetObjectField(reference, _id_inf, value.reference);

  static final _id_len = jniAccessors.getFieldIDOf(
    _classRef,
    r"len",
    r"I",
  );

  /// from: protected int len
  ///
  /// Length of input buffer.
  int get len => jniAccessors
      .getField(reference, _id_len, jni.JniCallType.intType)
      .integer;

  /// from: protected int len
  ///
  /// Length of input buffer.
  set len(int value) => jniEnv.SetIntField(reference, _id_len, value);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, r"<init>",
      r"(Ljava/io/InputStream;Ljava/util/zip/Inflater;I)V");

  /// from: public void <init>(java.io.InputStream in, java.util.zip.Inflater inf, int size)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new input stream with the specified decompressor and
  /// buffer size.
  ///@param in the input stream
  ///@param inf the decompressor ("inflater")
  ///@param size the input buffer size
  ///@exception IllegalArgumentException if {@code size <= 0}
  InflaterInputStream(
      inputstream_.InputStream in0, inflater_.Inflater inf, int size)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor,
            [in0.reference, inf.reference, jni.JValueInt(size)]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, r"<init>",
      r"(Ljava/io/InputStream;Ljava/util/zip/Inflater;)V");

  /// from: public void <init>(java.io.InputStream in, java.util.zip.Inflater inf)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new input stream with the specified decompressor and a
  /// default buffer size.
  ///@param in the input stream
  ///@param inf the decompressor ("inflater")
  InflaterInputStream.ctor1(
      inputstream_.InputStream in0, inflater_.Inflater inf)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [in0.reference, inf.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/InputStream;)V");

  /// from: public void <init>(java.io.InputStream in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new input stream with a default decompressor and buffer size.
  ///@param in the input stream
  InflaterInputStream.ctor2(inputstream_.InputStream in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [in0.reference]).object);

  static final _id_read =
      jniAccessors.getMethodIDOf(_classRef, r"read", r"()I");

  /// from: public int read()
  ///
  /// Reads a byte of uncompressed data. This method will block until
  /// enough input is available for decompression.
  ///@return the byte read, or -1 if end of compressed input is reached
  ///@exception IOException if an I/O error has occurred
  int read() => jniAccessors.callMethodWithArgs(
      reference, _id_read, jni.JniCallType.intType, []).integer;

  static final _id_read1 =
      jniAccessors.getMethodIDOf(_classRef, r"read", r"([BII)I");

  /// from: public int read(byte[] b, int off, int len)
  ///
  /// Reads uncompressed data into an array of bytes. If <code>len</code> is not
  /// zero, the method will block until some input can be decompressed; otherwise,
  /// no bytes are read and <code>0</code> is returned.
  ///@param b the buffer into which the data is read
  ///@param off the start offset in the destination array <code>b</code>
  ///@param len the maximum number of bytes read
  ///@return the actual number of bytes read, or -1 if the end of the
  ///         compressed input is reached or a preset dictionary is needed
  ///@exception NullPointerException If <code>b</code> is <code>null</code>.
  ///@exception IndexOutOfBoundsException If <code>off</code> is negative,
  /// <code>len</code> is negative, or <code>len</code> is greater than
  /// <code>b.length - off</code>
  ///@exception ZipException if a ZIP format error has occurred
  ///@exception IOException if an I/O error has occurred
  int read1(jni.JArray<jni.JByte> b, int off, int len) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_read1,
          jni.JniCallType.intType,
          [b.reference, jni.JValueInt(off), jni.JValueInt(len)]).integer;

  static final _id_available =
      jniAccessors.getMethodIDOf(_classRef, r"available", r"()I");

  /// from: public int available()
  ///
  /// Returns 0 after EOF has been reached, otherwise always return 1.
  ///
  /// Programs should not count on this method to return the actual number
  /// of bytes that could be read without blocking.
  ///@return 1 before EOF and 0 after EOF.
  ///@exception IOException if an I/O error occurs.
  int available() => jniAccessors.callMethodWithArgs(
      reference, _id_available, jni.JniCallType.intType, []).integer;

  static final _id_skip =
      jniAccessors.getMethodIDOf(_classRef, r"skip", r"(J)J");

  /// from: public long skip(long n)
  ///
  /// Skips specified number of bytes of uncompressed data.
  ///@param n the number of bytes to skip
  ///@return the actual number of bytes skipped.
  ///@exception IOException if an I/O error has occurred
  ///@exception IllegalArgumentException if {@code n < 0}
  int skip(int n) => jniAccessors.callMethodWithArgs(
      reference, _id_skip, jni.JniCallType.longType, [n]).long;

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, r"close", r"()V");

  /// from: public void close()
  ///
  /// Closes this input stream and releases any system resources associated
  /// with the stream.
  ///@exception IOException if an I/O error has occurred
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniCallType.voidType, []).check();

  static final _id_fill =
      jniAccessors.getMethodIDOf(_classRef, r"fill", r"()V");

  /// from: protected void fill()
  ///
  /// Fills input buffer with more data to decompress.
  ///@exception IOException if an I/O error has occurred
  void fill() => jniAccessors.callMethodWithArgs(
      reference, _id_fill, jni.JniCallType.voidType, []).check();

  static final _id_markSupported =
      jniAccessors.getMethodIDOf(_classRef, r"markSupported", r"()Z");

  /// from: public boolean markSupported()
  ///
  /// Tests if this input stream supports the <code>mark</code> and
  /// <code>reset</code> methods. The <code>markSupported</code>
  /// method of <code>InflaterInputStream</code> returns
  /// <code>false</code>.
  ///@return a <code>boolean</code> indicating if this stream type supports
  ///          the <code>mark</code> and <code>reset</code> methods.
  ///@see java.io.InputStream\#mark(int)
  ///@see java.io.InputStream\#reset()
  bool markSupported() => jniAccessors.callMethodWithArgs(
      reference, _id_markSupported, jni.JniCallType.booleanType, []).boolean;

  static final _id_mark =
      jniAccessors.getMethodIDOf(_classRef, r"mark", r"(I)V");

  /// from: synchronized public void mark(int readlimit)
  ///
  /// Marks the current position in this input stream.
  ///
  ///  The <code>mark</code> method of <code>InflaterInputStream</code>
  /// does nothing.
  ///@param readlimit the maximum limit of bytes that can be read before
  ///                      the mark position becomes invalid.
  ///@see java.io.InputStream\#reset()
  void mark(int readlimit) => jniAccessors.callMethodWithArgs(reference,
      _id_mark, jni.JniCallType.voidType, [jni.JValueInt(readlimit)]).check();

  static final _id_reset =
      jniAccessors.getMethodIDOf(_classRef, r"reset", r"()V");

  /// from: synchronized public void reset()
  ///
  /// Repositions this stream to the position at the time the
  /// <code>mark</code> method was last called on this input stream.
  ///
  ///  The method <code>reset</code> for class
  /// <code>InflaterInputStream</code> does nothing except throw an
  /// <code>IOException</code>.
  ///@exception IOException if this method is invoked.
  ///@see java.io.InputStream\#mark(int)
  ///@see java.io.IOException
  void reset() => jniAccessors.callMethodWithArgs(
      reference, _id_reset, jni.JniCallType.voidType, []).check();
}

class $InflaterInputStreamType extends jni.JObjType<InflaterInputStream> {
  const $InflaterInputStreamType();

  @override
  String get signature => r"Ljava/util/zip/InflaterInputStream;";

  @override
  InflaterInputStream fromRef(jni.JObjectPtr ref) =>
      InflaterInputStream.fromRef(ref);
}
