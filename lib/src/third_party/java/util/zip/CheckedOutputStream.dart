// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../io/OutputStream.dart" as outputstream_;

import "Checksum.dart" as checksum_;
import "../../../_init.dart";

/// from: java.util.zip.CheckedOutputStream
///
/// An output stream that also maintains a checksum of the data being
/// written. The checksum can then be used to verify the integrity of
/// the output data.
///@see Checksum
///@author David Connelly
class CheckedOutputStream extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  CheckedOutputStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"java/util/zip/CheckedOutputStream");

  /// The type which includes information such as the signature of this class.
  static const type = $CheckedOutputStreamType();
  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, r"<init>",
      r"(Ljava/io/OutputStream;Ljava/util/zip/Checksum;)V");

  /// from: public void <init>(java.io.OutputStream out, java.util.zip.Checksum cksum)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates an output stream with the specified Checksum.
  ///@param out the output stream
  ///@param cksum the checksum
  CheckedOutputStream(outputstream_.OutputStream out, checksum_.Checksum cksum)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor, [out.reference, cksum.reference]).object);

  static final _id_write =
      jniAccessors.getMethodIDOf(_classRef, r"write", r"(I)V");

  /// from: public void write(int b)
  ///
  /// Writes a byte. Will block until the byte is actually written.
  ///@param b the byte to be written
  ///@exception IOException if an I/O error has occurred
  void write(int b) => jniAccessors.callMethodWithArgs(reference, _id_write,
      jni.JniCallType.voidType, [jni.JValueInt(b)]).check();

  static final _id_write1 =
      jniAccessors.getMethodIDOf(_classRef, r"write", r"([BII)V");

  /// from: public void write(byte[] b, int off, int len)
  ///
  /// Writes an array of bytes. Will block until the bytes are
  /// actually written.
  ///@param b the data to be written
  ///@param off the start offset of the data
  ///@param len the number of bytes to be written
  ///@exception IOException if an I/O error has occurred
  void write1(jni.JArray<jni.JByte> b, int off, int len) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_write1,
          jni.JniCallType.voidType,
          [b.reference, jni.JValueInt(off), jni.JValueInt(len)]).check();

  static final _id_getChecksum = jniAccessors.getMethodIDOf(
      _classRef, r"getChecksum", r"()Ljava/util/zip/Checksum;");

  /// from: public java.util.zip.Checksum getChecksum()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Checksum for this output stream.
  ///@return the Checksum
  checksum_.Checksum getChecksum() =>
      const checksum_.$ChecksumType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getChecksum, jni.JniCallType.objectType, []).object);
}

class $CheckedOutputStreamType extends jni.JObjType<CheckedOutputStream> {
  const $CheckedOutputStreamType();

  @override
  String get signature => r"Ljava/util/zip/CheckedOutputStream;";

  @override
  CheckedOutputStream fromRef(jni.JObjectPtr ref) =>
      CheckedOutputStream.fromRef(ref);
}
