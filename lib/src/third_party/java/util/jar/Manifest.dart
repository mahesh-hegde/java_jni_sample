// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../io/InputStream.dart" as inputstream_;

import "Attributes.dart" as attributes_;

import "../../io/OutputStream.dart" as outputstream_;
import "../../../_init.dart";

/// from: java.util.jar.Manifest
///
/// The Manifest class is used to maintain Manifest entry names and their
/// associated Attributes. There are main Manifest Attributes as well as
/// per-entry Attributes. For information on the Manifest format, please
/// see the
/// <a href="{@docRoot}openjdk-redirect.html?v=8&path=/technotes/guides/jar/jar.html">
/// Manifest format specification</a>.
///@author David Connelly
///@see Attributes
///@since 1.2
class Manifest extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  Manifest.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf(r"java/util/jar/Manifest");

  /// The type which includes information such as the signature of this class.
  static const type = $ManifestType();
  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new, empty Manifest.
  Manifest()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/InputStream;)V");

  /// from: public void <init>(java.io.InputStream is)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new Manifest from the specified input stream.
  ///@param is the input stream containing manifest data
  ///@throws IOException if an I/O error has occurred
  Manifest.ctor1(inputstream_.InputStream is0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [is0.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/util/jar/Manifest;)V");

  /// from: public void <init>(java.util.jar.Manifest man)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a new Manifest that is a copy of the specified Manifest.
  ///@param man the Manifest to copy
  Manifest.ctor2(Manifest man)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [man.reference]).object);

  static final _id_getMainAttributes = jniAccessors.getMethodIDOf(
      _classRef, r"getMainAttributes", r"()Ljava/util/jar/Attributes;");

  /// from: public java.util.jar.Attributes getMainAttributes()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the main Attributes for the Manifest.
  ///@return the main Attributes for the Manifest
  attributes_.Attributes getMainAttributes() =>
      const attributes_.$AttributesType().fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getMainAttributes,
              jni.JniCallType.objectType, []).object);

  static final _id_getEntries = jniAccessors.getMethodIDOf(
      _classRef, r"getEntries", r"()Ljava/util/Map;");

  /// from: public java.util.Map<java.lang.String,java.util.jar.Attributes> getEntries()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a Map of the entries contained in this Manifest. Each entry
  /// is represented by a String name (key) and associated Attributes (value).
  /// The Map permits the {@code null} key, but no entry with a null key is
  /// created by \#read, nor is such an entry written by using \#write.
  ///@return a Map of the entries contained in this Manifest
  jni.JObject getEntries() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getEntries, jni.JniCallType.objectType, []).object);

  static final _id_getAttributes = jniAccessors.getMethodIDOf(_classRef,
      r"getAttributes", r"(Ljava/lang/String;)Ljava/util/jar/Attributes;");

  /// from: public java.util.jar.Attributes getAttributes(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the Attributes for the specified entry name.
  /// This method is defined as:
  /// <pre>
  ///      return (Attributes)getEntries().get(name)
  /// </pre>
  /// Though {@code null} is a valid {@code name}, when
  /// {@code getAttributes(null)} is invoked on a {@code Manifest}
  /// obtained from a jar file, {@code null} will be returned.  While jar
  /// files themselves do not allow {@code null}-named attributes, it is
  /// possible to invoke \#getEntries on a {@code Manifest}, and
  /// on that result, invoke {@code put} with a null key and an
  /// arbitrary value.  Subsequent invocations of
  /// {@code getAttributes(null)} will return the just-{@code put}
  /// value.
  ///
  /// Note that this method does not return the manifest's main attributes;
  /// see \#getMainAttributes.
  ///@param name entry name
  ///@return the Attributes for the specified entry name
  attributes_.Attributes getAttributes(jni.JString name) =>
      const attributes_.$AttributesType().fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getAttributes,
              jni.JniCallType.objectType, [name.reference]).object);

  static final _id_clear =
      jniAccessors.getMethodIDOf(_classRef, r"clear", r"()V");

  /// from: public void clear()
  ///
  /// Clears the main Attributes as well as the entries in this Manifest.
  void clear() => jniAccessors.callMethodWithArgs(
      reference, _id_clear, jni.JniCallType.voidType, []).check();

  static final _id_write = jniAccessors.getMethodIDOf(
      _classRef, r"write", r"(Ljava/io/OutputStream;)V");

  /// from: public void write(java.io.OutputStream out)
  ///
  /// Writes the Manifest to the specified OutputStream.
  /// Attributes.Name.MANIFEST_VERSION must be set in
  /// MainAttributes prior to invoking this method.
  ///@param out the output stream
  ///@exception IOException if an I/O error has occurred
  ///@see \#getMainAttributes
  void write(outputstream_.OutputStream out) => jniAccessors.callMethodWithArgs(
      reference, _id_write, jni.JniCallType.voidType, [out.reference]).check();

  static final _id_read = jniAccessors.getMethodIDOf(
      _classRef, r"read", r"(Ljava/io/InputStream;)V");

  /// from: public void read(java.io.InputStream is)
  ///
  /// Reads the Manifest from the specified InputStream. The entry
  /// names and attributes read will be merged in with the current
  /// manifest entries.
  ///@param is the input stream
  ///@exception IOException if an I/O error has occurred
  void read(inputstream_.InputStream is0) => jniAccessors.callMethodWithArgs(
      reference, _id_read, jni.JniCallType.voidType, [is0.reference]).check();

  static final _id_equals1 = jniAccessors.getMethodIDOf(
      _classRef, r"equals", r"(Ljava/lang/Object;)Z");

  /// from: public boolean equals(java.lang.Object o)
  ///
  /// Returns true if the specified Object is also a Manifest and has
  /// the same main Attributes and entries.
  ///@param o the object to be compared
  ///@return true if the specified Object is also a Manifest and has
  /// the same main Attributes and entries
  bool equals1(jni.JObject o) => jniAccessors.callMethodWithArgs(reference,
      _id_equals1, jni.JniCallType.booleanType, [o.reference]).boolean;

  static final _id_hashCode1 =
      jniAccessors.getMethodIDOf(_classRef, r"hashCode", r"()I");

  /// from: public int hashCode()
  ///
  /// Returns the hash code for this Manifest.
  int hashCode1() => jniAccessors.callMethodWithArgs(
      reference, _id_hashCode1, jni.JniCallType.intType, []).integer;

  static final _id_clone =
      jniAccessors.getMethodIDOf(_classRef, r"clone", r"()Ljava/lang/Object;");

  /// from: public java.lang.Object clone()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns a shallow copy of this Manifest.  The shallow copy is
  /// implemented as follows:
  /// <pre>
  ///     public Object clone() { return new Manifest(this); }
  /// </pre>
  ///@return a shallow copy of this Manifest
  jni.JObject clone() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_clone, jni.JniCallType.objectType, []).object);
}

class $ManifestType extends jni.JObjType<Manifest> {
  const $ManifestType();

  @override
  String get signature => r"Ljava/util/jar/Manifest;";

  @override
  Manifest fromRef(jni.JObjectPtr ref) => Manifest.fromRef(ref);
}
