// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "DeflaterOutputStream.dart" as deflateroutputstream_;

import "CRC32.dart" as crc32_;

import "../../io/OutputStream.dart" as outputstream_;
import "../../../_init.dart";

/// from: java.util.zip.GZIPOutputStream
///
/// This class implements a stream filter for writing compressed data in
/// the GZIP file format.
///@author David Connelly
class GZIPOutputStream extends deflateroutputstream_.DeflaterOutputStream {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  GZIPOutputStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"java/util/zip/GZIPOutputStream");

  /// The type which includes information such as the signature of this class.
  static const type = $GZIPOutputStreamType();
  static final _id_crc = jniAccessors.getFieldIDOf(
    _classRef,
    r"crc",
    r"Ljava/util/zip/CRC32;",
  );

  /// from: protected java.util.zip.CRC32 crc
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// CRC-32 of uncompressed data.
  crc32_.CRC32 get crc => const crc32_.$CRC32Type().fromRef(jniAccessors
      .getField(reference, _id_crc, jni.JniCallType.objectType)
      .object);

  /// from: protected java.util.zip.CRC32 crc
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// CRC-32 of uncompressed data.
  set crc(crc32_.CRC32 value) =>
      jniEnv.SetObjectField(reference, _id_crc, value.reference);

  static final _id_ctor6 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/OutputStream;I)V");

  /// from: public void <init>(java.io.OutputStream out, int size)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with the specified buffer size.
  ///
  /// The new output stream instance is created as if by invoking
  /// the 3-argument constructor GZIPOutputStream(out, size, false).
  ///@param out the output stream
  ///@param size the output buffer size
  ///@exception IOException If an I/O error has occurred.
  ///@exception IllegalArgumentException if {@code size <= 0}
  GZIPOutputStream.ctor6(outputstream_.OutputStream out, int size)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor6, [out.reference, jni.JValueInt(size)]).object);

  static final _id_ctor7 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/OutputStream;IZ)V");

  /// from: public void <init>(java.io.OutputStream out, int size, boolean syncFlush)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with the specified buffer size and
  /// flush mode.
  ///@param out the output stream
  ///@param size the output buffer size
  ///@param syncFlush if {@code true} invocation of the inherited
  ///        DeflaterOutputStream\#flush() flush() method of
  ///        this instance flushes the compressor with flush mode
  ///        Deflater\#SYNC_FLUSH before flushing the output
  ///        stream, otherwise only flushes the output stream
  ///@exception IOException If an I/O error has occurred.
  ///@exception IllegalArgumentException if {@code size <= 0}
  ///@since 1.7
  GZIPOutputStream.ctor7(
      outputstream_.OutputStream out, int size, bool syncFlush)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor7,
            [out.reference, jni.JValueInt(size), syncFlush ? 1 : 0]).object);

  static final _id_ctor5 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/OutputStream;)V");

  /// from: public void <init>(java.io.OutputStream out)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with a default buffer size.
  ///
  /// The new output stream instance is created as if by invoking
  /// the 2-argument constructor GZIPOutputStream(out, false).
  ///@param out the output stream
  ///@exception IOException If an I/O error has occurred.
  GZIPOutputStream.ctor5(outputstream_.OutputStream out)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor5, [out.reference]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/OutputStream;Z)V");

  /// from: public void <init>(java.io.OutputStream out, boolean syncFlush)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with a default buffer size and
  /// the specified flush mode.
  ///@param out the output stream
  ///@param syncFlush if {@code true} invocation of the inherited
  ///        DeflaterOutputStream\#flush() flush() method of
  ///        this instance flushes the compressor with flush mode
  ///        Deflater\#SYNC_FLUSH before flushing the output
  ///        stream, otherwise only flushes the output stream
  ///@exception IOException If an I/O error has occurred.
  ///@since 1.7
  GZIPOutputStream.ctor4(outputstream_.OutputStream out, bool syncFlush)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [out.reference, syncFlush ? 1 : 0]).object);

  static final _id_write1 =
      jniAccessors.getMethodIDOf(_classRef, r"write", r"([BII)V");

  /// from: synchronized public void write(byte[] buf, int off, int len)
  ///
  /// Writes array of bytes to the compressed output stream. This method
  /// will block until all the bytes are written.
  ///@param buf the data to be written
  ///@param off the start offset of the data
  ///@param len the length of the data
  ///@exception IOException If an I/O error has occurred.
  void write1(jni.JArray<jni.JByte> buf, int off, int len) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_write1,
          jni.JniCallType.voidType,
          [buf.reference, jni.JValueInt(off), jni.JValueInt(len)]).check();

  static final _id_finish =
      jniAccessors.getMethodIDOf(_classRef, r"finish", r"()V");

  /// from: public void finish()
  ///
  /// Finishes writing compressed data to the output stream without closing
  /// the underlying stream. Use this method when applying multiple filters
  /// in succession to the same output stream.
  ///@exception IOException if an I/O error has occurred
  void finish() => jniAccessors.callMethodWithArgs(
      reference, _id_finish, jni.JniCallType.voidType, []).check();
}

class $GZIPOutputStreamType extends jni.JObjType<GZIPOutputStream> {
  const $GZIPOutputStreamType();

  @override
  String get signature => r"Ljava/util/zip/GZIPOutputStream;";

  @override
  GZIPOutputStream fromRef(jni.JObjectPtr ref) => GZIPOutputStream.fromRef(ref);
}
