// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../../../_init.dart";

/// from: java.util.jar.JarException
///
/// Signals that an error of some sort has occurred while reading from
/// or writing to a JAR file.
///@author David Connelly
///@since 1.2
class JarException extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  JarException.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"java/util/jar/JarException");

  /// The type which includes information such as the signature of this class.
  static const type = $JarExceptionType();
  static final _id_ctor =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"()V");

  /// from: public void <init>()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a JarException with no detail message.
  JarException()
      : super.fromRef(
            jniAccessors.newObjectWithArgs(_classRef, _id_ctor, []).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String s)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Constructs a JarException with the specified detail message.
  ///@param s the detail message
  JarException.ctor1(jni.JString s)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor1, [s.reference]).object);
}

class $JarExceptionType extends jni.JObjType<JarException> {
  const $JarExceptionType();

  @override
  String get signature => r"Ljava/util/jar/JarException;";

  @override
  JarException fromRef(jni.JObjectPtr ref) => JarException.fromRef(ref);
}
