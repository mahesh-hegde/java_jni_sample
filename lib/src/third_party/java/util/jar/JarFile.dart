// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../zip/ZipFile.dart" as zipfile_;

import "Manifest.dart" as manifest_;

import "JarEntry.dart" as jarentry_;

import "../zip/ZipEntry.dart" as zipentry_;

import "../Enumeration.dart" as enumeration_;

import "../../io/InputStream.dart" as inputstream_;
import "../../../_init.dart";

/// from: java.util.jar.JarFile
///
/// The <code>JarFile</code> class is used to read the contents of a jar file
/// from any file that can be opened with <code>java.io.RandomAccessFile</code>.
/// It extends the class <code>java.util.zip.ZipFile</code> with support
/// for reading an optional <code>Manifest</code> entry. The
/// <code>Manifest</code> can be used to specify meta-information about the
/// jar file and its entries.
///
///  Unless otherwise noted, passing a <tt>null</tt> argument to a constructor
/// or method in this class will cause a NullPointerException to be
/// thrown.
///
/// If the verify flag is on when opening a signed jar file, the content of the
/// file is verified against its signature embedded inside the file. Please note
/// that the verification process does not include validating the signer's
/// certificate. A caller should inspect the return value of
/// JarEntry\#getCodeSigners() to further determine if the signature
/// can be trusted.
///@author David Connelly
///@see Manifest
///@see java.util.zip.ZipFile
///@see java.util.jar.JarEntry
///@since 1.2
class JarFile extends zipfile_.ZipFile {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  JarFile.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef = jniAccessors.getClassOf(r"java/util/jar/JarFile");

  /// The type which includes information such as the signature of this class.
  static const type = $JarFileType();

  /// from: static public final int CENATT
  static const CENATT1 = 36;

  /// from: static public final int CENATX
  static const CENATX1 = 38;

  /// from: static public final int CENCOM
  static const CENCOM1 = 32;

  /// from: static public final int CENCRC
  static const CENCRC1 = 16;

  /// from: static public final int CENDSK
  static const CENDSK1 = 34;

  /// from: static public final int CENEXT
  static const CENEXT1 = 30;

  /// from: static public final int CENFLG
  static const CENFLG1 = 8;

  /// from: static public final int CENHDR
  static const CENHDR1 = 46;

  /// from: static public final int CENHOW
  static const CENHOW1 = 10;

  /// from: static public final int CENLEN
  static const CENLEN1 = 24;

  /// from: static public final int CENNAM
  static const CENNAM1 = 28;

  /// from: static public final int CENOFF
  static const CENOFF1 = 42;

  /// from: static public final long CENSIG
  static const CENSIG1 = 33639248;

  /// from: static public final int CENSIZ
  static const CENSIZ1 = 20;

  /// from: static public final int CENTIM
  static const CENTIM1 = 12;

  /// from: static public final int CENVEM
  static const CENVEM1 = 4;

  /// from: static public final int CENVER
  static const CENVER1 = 6;

  /// from: static public final int ENDCOM
  static const ENDCOM1 = 20;

  /// from: static public final int ENDHDR
  static const ENDHDR1 = 22;

  /// from: static public final int ENDOFF
  static const ENDOFF1 = 16;

  /// from: static public final long ENDSIG
  static const ENDSIG1 = 101010256;

  /// from: static public final int ENDSIZ
  static const ENDSIZ1 = 12;

  /// from: static public final int ENDSUB
  static const ENDSUB1 = 8;

  /// from: static public final int ENDTOT
  static const ENDTOT1 = 10;

  /// from: static public final int EXTCRC
  static const EXTCRC1 = 4;

  /// from: static public final int EXTHDR
  static const EXTHDR1 = 16;

  /// from: static public final int EXTLEN
  static const EXTLEN1 = 12;

  /// from: static public final long EXTSIG
  static const EXTSIG1 = 134695760;

  /// from: static public final int EXTSIZ
  static const EXTSIZ1 = 8;

  /// from: static public final int LOCCRC
  static const LOCCRC1 = 14;

  /// from: static public final int LOCEXT
  static const LOCEXT1 = 28;

  /// from: static public final int LOCFLG
  static const LOCFLG1 = 6;

  /// from: static public final int LOCHDR
  static const LOCHDR1 = 30;

  /// from: static public final int LOCHOW
  static const LOCHOW1 = 8;

  /// from: static public final int LOCLEN
  static const LOCLEN1 = 22;

  /// from: static public final int LOCNAM
  static const LOCNAM1 = 26;

  /// from: static public final long LOCSIG
  static const LOCSIG1 = 67324752;

  /// from: static public final int LOCSIZ
  static const LOCSIZ1 = 18;

  /// from: static public final int LOCTIM
  static const LOCTIM1 = 10;

  /// from: static public final int LOCVER
  static const LOCVER1 = 4;

  /// from: static public final java.lang.String MANIFEST_NAME
  ///
  /// The JAR manifest file name.
  static const MANIFEST_NAME = r"""META-INF/MANIFEST.MF""";

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/lang/String;)V");

  /// from: public void <init>(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new <code>JarFile</code> to read from the specified
  /// file <code>name</code>. The <code>JarFile</code> will be verified if
  /// it is signed.
  ///@param name the name of the jar file to be opened for reading
  ///@throws IOException if an I/O error has occurred
  ///@throws SecurityException if access to the file is denied
  ///         by the SecurityManager
  JarFile(jni.JString name)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [name.reference]).object);

  static final _id_ctor6 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/lang/String;Z)V");

  /// from: public void <init>(java.lang.String name, boolean verify)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new <code>JarFile</code> to read from the specified
  /// file <code>name</code>.
  ///@param name the name of the jar file to be opened for reading
  ///@param verify whether or not to verify the jar file if
  /// it is signed.
  ///@throws IOException if an I/O error has occurred
  ///@throws SecurityException if access to the file is denied
  ///         by the SecurityManager
  JarFile.ctor6(jni.JString name, bool verify)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor6, [name.reference, verify ? 1 : 0]).object);

  static final _id_ctor2 =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"(Ljava/io/File;)V");

  /// from: public void <init>(java.io.File file)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new <code>JarFile</code> to read from the specified
  /// <code>File</code> object. The <code>JarFile</code> will be verified if
  /// it is signed.
  ///@param file the jar file to be opened for reading
  ///@throws IOException if an I/O error has occurred
  ///@throws SecurityException if access to the file is denied
  ///         by the SecurityManager
  JarFile.ctor2(jni.JObject file)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [file.reference]).object);

  static final _id_ctor7 =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"(Ljava/io/File;Z)V");

  /// from: public void <init>(java.io.File file, boolean verify)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new <code>JarFile</code> to read from the specified
  /// <code>File</code> object.
  ///@param file the jar file to be opened for reading
  ///@param verify whether or not to verify the jar file if
  /// it is signed.
  ///@throws IOException if an I/O error has occurred
  ///@throws SecurityException if access to the file is denied
  ///         by the SecurityManager.
  JarFile.ctor7(jni.JObject file, bool verify)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor7, [file.reference, verify ? 1 : 0]).object);

  static final _id_ctor8 =
      jniAccessors.getMethodIDOf(_classRef, r"<init>", r"(Ljava/io/File;ZI)V");

  /// from: public void <init>(java.io.File file, boolean verify, int mode)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new <code>JarFile</code> to read from the specified
  /// <code>File</code> object in the specified mode.  The mode argument
  /// must be either <tt>OPEN_READ</tt> or <tt>OPEN_READ | OPEN_DELETE</tt>.
  ///@param file the jar file to be opened for reading
  ///@param verify whether or not to verify the jar file if
  /// it is signed.
  ///@param mode the mode in which the file is to be opened
  ///@throws IOException if an I/O error has occurred
  ///@throws IllegalArgumentException if the <tt>mode</tt> argument is invalid
  ///@throws SecurityException if access to the file is denied
  ///         by the SecurityManager
  ///@since 1.3
  JarFile.ctor8(jni.JObject file, bool verify, int mode)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor8,
            [file.reference, verify ? 1 : 0, jni.JValueInt(mode)]).object);

  static final _id_getManifest = jniAccessors.getMethodIDOf(
      _classRef, r"getManifest", r"()Ljava/util/jar/Manifest;");

  /// from: public java.util.jar.Manifest getManifest()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the jar file manifest, or <code>null</code> if none.
  ///@return the jar file manifest, or <code>null</code> if none
  ///@throws IllegalStateException may be thrown if the jar file has been closed
  ///@throws IOException if an I/O error has occurred
  manifest_.Manifest getManifest() =>
      const manifest_.$ManifestType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getManifest, jni.JniCallType.objectType, []).object);

  static final _id_getJarEntry = jniAccessors.getMethodIDOf(_classRef,
      r"getJarEntry", r"(Ljava/lang/String;)Ljava/util/jar/JarEntry;");

  /// from: public java.util.jar.JarEntry getJarEntry(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the <code>JarEntry</code> for the given entry name or
  /// <code>null</code> if not found.
  ///@param name the jar file entry name
  ///@return the <code>JarEntry</code> for the given entry name or
  ///         <code>null</code> if not found.
  ///@throws IllegalStateException may be thrown if the jar file has been closed
  ///@see java.util.jar.JarEntry
  jarentry_.JarEntry getJarEntry(jni.JString name) =>
      const jarentry_.$JarEntryType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getJarEntry,
          jni.JniCallType.objectType,
          [name.reference]).object);

  static final _id_getEntry = jniAccessors.getMethodIDOf(
      _classRef, r"getEntry", r"(Ljava/lang/String;)Ljava/util/zip/ZipEntry;");

  /// from: public java.util.zip.ZipEntry getEntry(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the <code>ZipEntry</code> for the given entry name or
  /// <code>null</code> if not found.
  ///@param name the jar file entry name
  ///@return the <code>ZipEntry</code> for the given entry name or
  ///         <code>null</code> if not found
  ///@throws IllegalStateException may be thrown if the jar file has been closed
  ///@see java.util.zip.ZipEntry
  zipentry_.ZipEntry getEntry(jni.JString name) =>
      const zipentry_.$ZipEntryType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getEntry,
          jni.JniCallType.objectType,
          [name.reference]).object);

  static final _id_entries = jniAccessors.getMethodIDOf(
      _classRef, r"entries", r"()Ljava/util/Enumeration;");

  /// from: public java.util.Enumeration<java.util.jar.JarEntry> entries()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an enumeration of the zip file entries.
  enumeration_.Enumeration<jarentry_.JarEntry> entries() =>
      const enumeration_.$EnumerationType(jarentry_.$JarEntryType()).fromRef(
          jniAccessors.callMethodWithArgs(
              reference, _id_entries, jni.JniCallType.objectType, []).object);

  static final _id_stream = jniAccessors.getMethodIDOf(
      _classRef, r"stream", r"()Ljava/util/stream/Stream;");

  /// from: public java.util.stream.Stream<java.util.jar.JarEntry> stream()
  /// The returned object must be deleted after use, by calling the `delete` method.
  jni.JObject stream() =>
      const jni.JObjectType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_stream, jni.JniCallType.objectType, []).object);

  static final _id_getInputStream = jniAccessors.getMethodIDOf(_classRef,
      r"getInputStream", r"(Ljava/util/zip/ZipEntry;)Ljava/io/InputStream;");

  /// from: synchronized public java.io.InputStream getInputStream(java.util.zip.ZipEntry ze)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns an input stream for reading the contents of the specified
  /// zip file entry.
  ///@param ze the zip file entry
  ///@return an input stream for reading the contents of the specified
  ///         zip file entry
  ///@throws ZipException if a zip file format error has occurred
  ///@throws IOException if an I/O error has occurred
  ///@throws SecurityException if any of the jar file entries
  ///         are incorrectly signed.
  ///@throws IllegalStateException may be thrown if the jar file has been closed
  inputstream_.InputStream getInputStream(zipentry_.ZipEntry ze) =>
      const inputstream_.$InputStreamType().fromRef(jniAccessors
          .callMethodWithArgs(reference, _id_getInputStream,
              jni.JniCallType.objectType, [ze.reference]).object);
}

class $JarFileType extends jni.JObjType<JarFile> {
  const $JarFileType();

  @override
  String get signature => r"Ljava/util/jar/JarFile;";

  @override
  JarFile fromRef(jni.JObjectPtr ref) => JarFile.fromRef(ref);
}
