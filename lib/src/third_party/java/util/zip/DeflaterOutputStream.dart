// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Deflater.dart" as deflater_;

import "../../io/OutputStream.dart" as outputstream_;
import "../../../_init.dart";

/// from: java.util.zip.DeflaterOutputStream
///
/// This class implements an output stream filter for compressing data in
/// the "deflate" compression format. It is also used as the basis for other
/// types of compression filters, such as GZIPOutputStream.
///@see Deflater
///@author David Connelly
class DeflaterOutputStream extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  DeflaterOutputStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"java/util/zip/DeflaterOutputStream");

  /// The type which includes information such as the signature of this class.
  static const type = $DeflaterOutputStreamType();
  static final _id_buf = jniAccessors.getFieldIDOf(
    _classRef,
    r"buf",
    r"[B",
  );

  /// from: protected byte[] buf
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Output buffer for writing compressed data.
  jni.JArray<jni.JByte> get buf =>
      const jni.JArrayType(jni.JByteType()).fromRef(jniAccessors
          .getField(reference, _id_buf, jni.JniCallType.objectType)
          .object);

  /// from: protected byte[] buf
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Output buffer for writing compressed data.
  set buf(jni.JArray<jni.JByte> value) =>
      jniEnv.SetObjectField(reference, _id_buf, value.reference);

  static final _id_def = jniAccessors.getFieldIDOf(
    _classRef,
    r"def",
    r"Ljava/util/zip/Deflater;",
  );

  /// from: protected java.util.zip.Deflater def
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Compressor for this stream.
  deflater_.Deflater get def =>
      const deflater_.$DeflaterType().fromRef(jniAccessors
          .getField(reference, _id_def, jni.JniCallType.objectType)
          .object);

  /// from: protected java.util.zip.Deflater def
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Compressor for this stream.
  set def(deflater_.Deflater value) =>
      jniEnv.SetObjectField(reference, _id_def, value.reference);

  static final _id_ctor = jniAccessors.getMethodIDOf(_classRef, r"<init>",
      r"(Ljava/io/OutputStream;Ljava/util/zip/Deflater;IZ)V");

  /// from: public void <init>(java.io.OutputStream out, java.util.zip.Deflater def, int size, boolean syncFlush)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with the specified compressor,
  /// buffer size and flush mode.
  ///@param out the output stream
  ///@param def the compressor ("deflater")
  ///@param size the output buffer size
  ///@param syncFlush if {@code true} the \#flush() method of this
  ///        instance flushes the compressor with flush mode
  ///        Deflater\#SYNC_FLUSH before flushing the output
  ///        stream, otherwise only flushes the output stream
  ///@throws IllegalArgumentException if {@code size <= 0}
  ///@since 1.7
  DeflaterOutputStream(outputstream_.OutputStream out, deflater_.Deflater def,
      int size, bool syncFlush)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor, [
          out.reference,
          def.reference,
          jni.JValueInt(size),
          syncFlush ? 1 : 0
        ]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, r"<init>",
      r"(Ljava/io/OutputStream;Ljava/util/zip/Deflater;I)V");

  /// from: public void <init>(java.io.OutputStream out, java.util.zip.Deflater def, int size)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with the specified compressor and
  /// buffer size.
  ///
  /// The new output stream instance is created as if by invoking
  /// the 4-argument constructor DeflaterOutputStream(out, def, size, false).
  ///@param out the output stream
  ///@param def the compressor ("deflater")
  ///@param size the output buffer size
  ///@exception IllegalArgumentException if {@code size <= 0}
  DeflaterOutputStream.ctor1(
      outputstream_.OutputStream out, deflater_.Deflater def, int size)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor1,
            [out.reference, def.reference, jni.JValueInt(size)]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, r"<init>",
      r"(Ljava/io/OutputStream;Ljava/util/zip/Deflater;Z)V");

  /// from: public void <init>(java.io.OutputStream out, java.util.zip.Deflater def, boolean syncFlush)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with the specified compressor, flush
  /// mode and a default buffer size.
  ///@param out the output stream
  ///@param def the compressor ("deflater")
  ///@param syncFlush if {@code true} the \#flush() method of this
  ///        instance flushes the compressor with flush mode
  ///        Deflater\#SYNC_FLUSH before flushing the output
  ///        stream, otherwise only flushes the output stream
  ///@since 1.7
  DeflaterOutputStream.ctor2(
      outputstream_.OutputStream out, deflater_.Deflater def, bool syncFlush)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [out.reference, def.reference, syncFlush ? 1 : 0]).object);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(_classRef, r"<init>",
      r"(Ljava/io/OutputStream;Ljava/util/zip/Deflater;)V");

  /// from: public void <init>(java.io.OutputStream out, java.util.zip.Deflater def)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with the specified compressor and
  /// a default buffer size.
  ///
  /// The new output stream instance is created as if by invoking
  /// the 3-argument constructor DeflaterOutputStream(out, def, false).
  ///@param out the output stream
  ///@param def the compressor ("deflater")
  DeflaterOutputStream.ctor3(
      outputstream_.OutputStream out, deflater_.Deflater def)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [out.reference, def.reference]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/OutputStream;Z)V");

  /// from: public void <init>(java.io.OutputStream out, boolean syncFlush)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with a default compressor, a default
  /// buffer size and the specified flush mode.
  ///@param out the output stream
  ///@param syncFlush if {@code true} the \#flush() method of this
  ///        instance flushes the compressor with flush mode
  ///        Deflater\#SYNC_FLUSH before flushing the output
  ///        stream, otherwise only flushes the output stream
  ///@since 1.7
  DeflaterOutputStream.ctor4(outputstream_.OutputStream out, bool syncFlush)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [out.reference, syncFlush ? 1 : 0]).object);

  static final _id_ctor5 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/OutputStream;)V");

  /// from: public void <init>(java.io.OutputStream out)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with a default compressor and buffer size.
  ///
  /// The new output stream instance is created as if by invoking
  /// the 2-argument constructor DeflaterOutputStream(out, false).
  ///@param out the output stream
  DeflaterOutputStream.ctor5(outputstream_.OutputStream out)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor5, [out.reference]).object);

  static final _id_write =
      jniAccessors.getMethodIDOf(_classRef, r"write", r"(I)V");

  /// from: public void write(int b)
  ///
  /// Writes a byte to the compressed output stream. This method will
  /// block until the byte can be written.
  ///@param b the byte to be written
  ///@exception IOException if an I/O error has occurred
  void write(int b) => jniAccessors.callMethodWithArgs(reference, _id_write,
      jni.JniCallType.voidType, [jni.JValueInt(b)]).check();

  static final _id_write1 =
      jniAccessors.getMethodIDOf(_classRef, r"write", r"([BII)V");

  /// from: public void write(byte[] b, int off, int len)
  ///
  /// Writes an array of bytes to the compressed output stream. This
  /// method will block until all the bytes are written.
  ///@param b the data to be written
  ///@param off the start offset of the data
  ///@param len the length of the data
  ///@exception IOException if an I/O error has occurred
  void write1(jni.JArray<jni.JByte> b, int off, int len) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_write1,
          jni.JniCallType.voidType,
          [b.reference, jni.JValueInt(off), jni.JValueInt(len)]).check();

  static final _id_finish =
      jniAccessors.getMethodIDOf(_classRef, r"finish", r"()V");

  /// from: public void finish()
  ///
  /// Finishes writing compressed data to the output stream without closing
  /// the underlying stream. Use this method when applying multiple filters
  /// in succession to the same output stream.
  ///@exception IOException if an I/O error has occurred
  void finish() => jniAccessors.callMethodWithArgs(
      reference, _id_finish, jni.JniCallType.voidType, []).check();

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, r"close", r"()V");

  /// from: public void close()
  ///
  /// Writes remaining compressed data to the output stream and closes the
  /// underlying stream.
  ///@exception IOException if an I/O error has occurred
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniCallType.voidType, []).check();

  static final _id_deflate =
      jniAccessors.getMethodIDOf(_classRef, r"deflate", r"()V");

  /// from: protected void deflate()
  ///
  /// Writes next block of compressed data to the output stream.
  ///@throws IOException if an I/O error has occurred
  void deflate() => jniAccessors.callMethodWithArgs(
      reference, _id_deflate, jni.JniCallType.voidType, []).check();

  static final _id_flush =
      jniAccessors.getMethodIDOf(_classRef, r"flush", r"()V");

  /// from: public void flush()
  ///
  /// Flushes the compressed output stream.
  ///
  /// If \#DeflaterOutputStream(OutputStream, Deflater, int, boolean) syncFlush is {@code true} when this compressed output stream is
  /// constructed, this method first flushes the underlying {@code compressor}
  /// with the flush mode Deflater\#SYNC_FLUSH to force
  /// all pending data to be flushed out to the output stream and then
  /// flushes the output stream. Otherwise this method only flushes the
  /// output stream without flushing the {@code compressor}.
  ///@throws IOException if an I/O error has occurred
  ///@since 1.7
  void flush() => jniAccessors.callMethodWithArgs(
      reference, _id_flush, jni.JniCallType.voidType, []).check();
}

class $DeflaterOutputStreamType extends jni.JObjType<DeflaterOutputStream> {
  const $DeflaterOutputStreamType();

  @override
  String get signature => r"Ljava/util/zip/DeflaterOutputStream;";

  @override
  DeflaterOutputStream fromRef(jni.JObjectPtr ref) =>
      DeflaterOutputStream.fromRef(ref);
}
