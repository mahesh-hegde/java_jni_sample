// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "InflaterInputStream.dart" as inflaterinputstream_;

import "CRC32.dart" as crc32_;

import "../../io/InputStream.dart" as inputstream_;
import "../../../_init.dart";

/// from: java.util.zip.GZIPInputStream
///
/// This class implements a stream filter for reading compressed data in
/// the GZIP file format.
///@see InflaterInputStream
///@author David Connelly
class GZIPInputStream extends inflaterinputstream_.InflaterInputStream {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  GZIPInputStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"java/util/zip/GZIPInputStream");

  /// The type which includes information such as the signature of this class.
  static const type = $GZIPInputStreamType();

  /// from: static public final int GZIP_MAGIC
  ///
  /// GZIP header magic number.
  static const GZIP_MAGIC = 35615;

  static final _id_crc = jniAccessors.getFieldIDOf(
    _classRef,
    r"crc",
    r"Ljava/util/zip/CRC32;",
  );

  /// from: protected java.util.zip.CRC32 crc
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// CRC-32 for uncompressed data.
  crc32_.CRC32 get crc => const crc32_.$CRC32Type().fromRef(jniAccessors
      .getField(reference, _id_crc, jni.JniCallType.objectType)
      .object);

  /// from: protected java.util.zip.CRC32 crc
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// CRC-32 for uncompressed data.
  set crc(crc32_.CRC32 value) =>
      jniEnv.SetObjectField(reference, _id_crc, value.reference);

  static final _id_eos = jniAccessors.getFieldIDOf(
    _classRef,
    r"eos",
    r"Z",
  );

  /// from: protected boolean eos
  ///
  /// Indicates end of input stream.
  bool get eos => jniAccessors
      .getField(reference, _id_eos, jni.JniCallType.booleanType)
      .boolean;

  /// from: protected boolean eos
  ///
  /// Indicates end of input stream.
  set eos(bool value) =>
      jniEnv.SetBooleanField(reference, _id_eos, value ? 1 : 0);

  static final _id_ctor3 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/InputStream;I)V");

  /// from: public void <init>(java.io.InputStream in, int size)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new input stream with the specified buffer size.
  ///@param in the input stream
  ///@param size the input buffer size
  ///@exception ZipException if a GZIP format error has occurred or the
  ///                         compression method used is unsupported
  ///@exception IOException if an I/O error has occurred
  ///@exception IllegalArgumentException if {@code size <= 0}
  GZIPInputStream.ctor3(inputstream_.InputStream in0, int size)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor3, [in0.reference, jni.JValueInt(size)]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/InputStream;)V");

  /// from: public void <init>(java.io.InputStream in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new input stream with a default buffer size.
  ///@param in the input stream
  ///@exception ZipException if a GZIP format error has occurred or the
  ///                         compression method used is unsupported
  ///@exception IOException if an I/O error has occurred
  GZIPInputStream.ctor2(inputstream_.InputStream in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [in0.reference]).object);

  static final _id_read1 =
      jniAccessors.getMethodIDOf(_classRef, r"read", r"([BII)I");

  /// from: public int read(byte[] buf, int off, int len)
  ///
  /// Reads uncompressed data into an array of bytes. If <code>len</code> is not
  /// zero, the method will block until some input can be decompressed; otherwise,
  /// no bytes are read and <code>0</code> is returned.
  ///@param buf the buffer into which the data is read
  ///@param off the start offset in the destination array <code>b</code>
  ///@param len the maximum number of bytes read
  ///@return the actual number of bytes read, or -1 if the end of the
  ///          compressed input stream is reached
  ///@exception NullPointerException If <code>buf</code> is <code>null</code>.
  ///@exception IndexOutOfBoundsException If <code>off</code> is negative,
  /// <code>len</code> is negative, or <code>len</code> is greater than
  /// <code>buf.length - off</code>
  ///@exception ZipException if the compressed input data is corrupt.
  ///@exception IOException if an I/O error has occurred.
  int read1(jni.JArray<jni.JByte> buf, int off, int len) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_read1,
          jni.JniCallType.intType,
          [buf.reference, jni.JValueInt(off), jni.JValueInt(len)]).integer;

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, r"close", r"()V");

  /// from: public void close()
  ///
  /// Closes this input stream and releases any system resources associated
  /// with the stream.
  ///@exception IOException if an I/O error has occurred
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniCallType.voidType, []).check();
}

class $GZIPInputStreamType extends jni.JObjType<GZIPInputStream> {
  const $GZIPInputStreamType();

  @override
  String get signature => r"Ljava/util/zip/GZIPInputStream;";

  @override
  GZIPInputStream fromRef(jni.JObjectPtr ref) => GZIPInputStream.fromRef(ref);
}
