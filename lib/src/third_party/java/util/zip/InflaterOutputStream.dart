// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "Inflater.dart" as inflater_;

import "../../io/OutputStream.dart" as outputstream_;
import "../../../_init.dart";

/// from: java.util.zip.InflaterOutputStream
///
/// Implements an output stream filter for uncompressing data stored in the
/// "deflate" compression format.
///@since 1.6
///@author David R Tribble (david@tribble.com)
///@see InflaterInputStream
///@see DeflaterInputStream
///@see DeflaterOutputStream
class InflaterOutputStream extends jni.JObject {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  InflaterOutputStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"java/util/zip/InflaterOutputStream");

  /// The type which includes information such as the signature of this class.
  static const type = $InflaterOutputStreamType();
  static final _id_buf = jniAccessors.getFieldIDOf(
    _classRef,
    r"buf",
    r"[B",
  );

  /// from: protected final byte[] buf
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Output buffer for writing uncompressed data.
  jni.JArray<jni.JByte> get buf =>
      const jni.JArrayType(jni.JByteType()).fromRef(jniAccessors
          .getField(reference, _id_buf, jni.JniCallType.objectType)
          .object);

  static final _id_inf = jniAccessors.getFieldIDOf(
    _classRef,
    r"inf",
    r"Ljava/util/zip/Inflater;",
  );

  /// from: protected final java.util.zip.Inflater inf
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Decompressor for this stream.
  inflater_.Inflater get inf =>
      const inflater_.$InflaterType().fromRef(jniAccessors
          .getField(reference, _id_inf, jni.JniCallType.objectType)
          .object);

  static final _id_ctor = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/OutputStream;)V");

  /// from: public void <init>(java.io.OutputStream out)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with a default decompressor and buffer
  /// size.
  ///@param out output stream to write the uncompressed data to
  ///@throws NullPointerException if {@code out} is null
  InflaterOutputStream(outputstream_.OutputStream out)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor, [out.reference]).object);

  static final _id_ctor1 = jniAccessors.getMethodIDOf(_classRef, r"<init>",
      r"(Ljava/io/OutputStream;Ljava/util/zip/Inflater;)V");

  /// from: public void <init>(java.io.OutputStream out, java.util.zip.Inflater infl)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with the specified decompressor and a
  /// default buffer size.
  ///@param out output stream to write the uncompressed data to
  ///@param infl decompressor ("inflater") for this stream
  ///@throws NullPointerException if {@code out} or {@code infl} is null
  InflaterOutputStream.ctor1(
      outputstream_.OutputStream out, inflater_.Inflater infl)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor1, [out.reference, infl.reference]).object);

  static final _id_ctor2 = jniAccessors.getMethodIDOf(_classRef, r"<init>",
      r"(Ljava/io/OutputStream;Ljava/util/zip/Inflater;I)V");

  /// from: public void <init>(java.io.OutputStream out, java.util.zip.Inflater infl, int bufLen)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new output stream with the specified decompressor and
  /// buffer size.
  ///@param out output stream to write the uncompressed data to
  ///@param infl decompressor ("inflater") for this stream
  ///@param bufLen decompression buffer size
  ///@throws IllegalArgumentException if {@code bufLen <= 0}
  ///@throws NullPointerException if {@code out} or {@code infl} is null
  InflaterOutputStream.ctor2(
      outputstream_.OutputStream out, inflater_.Inflater infl, int bufLen)
      : super.fromRef(jniAccessors.newObjectWithArgs(_classRef, _id_ctor2,
            [out.reference, infl.reference, jni.JValueInt(bufLen)]).object);

  static final _id_close =
      jniAccessors.getMethodIDOf(_classRef, r"close", r"()V");

  /// from: public void close()
  ///
  /// Writes any remaining uncompressed data to the output stream and closes
  /// the underlying output stream.
  ///@throws IOException if an I/O error occurs
  void close() => jniAccessors.callMethodWithArgs(
      reference, _id_close, jni.JniCallType.voidType, []).check();

  static final _id_flush =
      jniAccessors.getMethodIDOf(_classRef, r"flush", r"()V");

  /// from: public void flush()
  ///
  /// Flushes this output stream, forcing any pending buffered output bytes to be
  /// written.
  ///@throws IOException if an I/O error occurs or this stream is already
  /// closed
  void flush() => jniAccessors.callMethodWithArgs(
      reference, _id_flush, jni.JniCallType.voidType, []).check();

  static final _id_finish =
      jniAccessors.getMethodIDOf(_classRef, r"finish", r"()V");

  /// from: public void finish()
  ///
  /// Finishes writing uncompressed data to the output stream without closing
  /// the underlying stream.  Use this method when applying multiple filters in
  /// succession to the same output stream.
  ///@throws IOException if an I/O error occurs or this stream is already
  /// closed
  void finish() => jniAccessors.callMethodWithArgs(
      reference, _id_finish, jni.JniCallType.voidType, []).check();

  static final _id_write =
      jniAccessors.getMethodIDOf(_classRef, r"write", r"(I)V");

  /// from: public void write(int b)
  ///
  /// Writes a byte to the uncompressed output stream.
  ///@param b a single byte of compressed data to decompress and write to
  /// the output stream
  ///@throws IOException if an I/O error occurs or this stream is already
  /// closed
  ///@throws ZipException if a compression (ZIP) format error occurs
  void write(int b) => jniAccessors.callMethodWithArgs(reference, _id_write,
      jni.JniCallType.voidType, [jni.JValueInt(b)]).check();

  static final _id_write1 =
      jniAccessors.getMethodIDOf(_classRef, r"write", r"([BII)V");

  /// from: public void write(byte[] b, int off, int len)
  ///
  /// Writes an array of bytes to the uncompressed output stream.
  ///@param b buffer containing compressed data to decompress and write to
  /// the output stream
  ///@param off starting offset of the compressed data within {@code b}
  ///@param len number of bytes to decompress from {@code b}
  ///@throws IndexOutOfBoundsException if {@code off < 0}, or if
  /// {@code len < 0}, or if {@code len > b.length - off}
  ///@throws IOException if an I/O error occurs or this stream is already
  /// closed
  ///@throws NullPointerException if {@code b} is null
  ///@throws ZipException if a compression (ZIP) format error occurs
  void write1(jni.JArray<jni.JByte> b, int off, int len) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_write1,
          jni.JniCallType.voidType,
          [b.reference, jni.JValueInt(off), jni.JValueInt(len)]).check();
}

class $InflaterOutputStreamType extends jni.JObjType<InflaterOutputStream> {
  const $InflaterOutputStreamType();

  @override
  String get signature => r"Ljava/util/zip/InflaterOutputStream;";

  @override
  InflaterOutputStream fromRef(jni.JObjectPtr ref) =>
      InflaterOutputStream.fromRef(ref);
}
