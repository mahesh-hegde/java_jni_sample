// ANDROID LICENSE GOES HERE

// Autogenerated by jnigen. DO NOT EDIT!

// ignore_for_file: annotate_overrides
// ignore_for_file: camel_case_extensions
// ignore_for_file: camel_case_types
// ignore_for_file: constant_identifier_names
// ignore_for_file: file_names
// ignore_for_file: no_leading_underscores_for_local_identifiers
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: overridden_fields
// ignore_for_file: unnecessary_cast
// ignore_for_file: unused_element
// ignore_for_file: unused_field
// ignore_for_file: unused_import
// ignore_for_file: unused_shown_name

import "dart:isolate" show ReceivePort;
import "dart:ffi" as ffi;
import "package:jni/internal_helpers_for_jnigen.dart";
import "package:jni/jni.dart" as jni;

import "../zip/ZipInputStream.dart" as zipinputstream_;

import "../../io/InputStream.dart" as inputstream_;

import "Manifest.dart" as manifest_;

import "../zip/ZipEntry.dart" as zipentry_;

import "JarEntry.dart" as jarentry_;
import "../../../_init.dart";

/// from: java.util.jar.JarInputStream
///
/// The <code>JarInputStream</code> class is used to read the contents of
/// a JAR file from any input stream. It extends the class
/// <code>java.util.zip.ZipInputStream</code> with support for reading
/// an optional <code>Manifest</code> entry. The <code>Manifest</code>
/// can be used to store meta-information about the JAR file and its entries.
///@author David Connelly
///@see Manifest
///@see java.util.zip.ZipInputStream
///@since 1.2
class JarInputStream extends zipinputstream_.ZipInputStream {
  late final jni.JObjType? _$type;
  @override
  jni.JObjType get $type => _$type ??= type;

  JarInputStream.fromRef(
    jni.JObjectPtr ref,
  ) : super.fromRef(ref);

  static final _classRef =
      jniAccessors.getClassOf(r"java/util/jar/JarInputStream");

  /// The type which includes information such as the signature of this class.
  static const type = $JarInputStreamType();

  /// from: static public final int CENATT
  static const CENATT1 = 36;

  /// from: static public final int CENATX
  static const CENATX1 = 38;

  /// from: static public final int CENCOM
  static const CENCOM1 = 32;

  /// from: static public final int CENCRC
  static const CENCRC1 = 16;

  /// from: static public final int CENDSK
  static const CENDSK1 = 34;

  /// from: static public final int CENEXT
  static const CENEXT1 = 30;

  /// from: static public final int CENFLG
  static const CENFLG1 = 8;

  /// from: static public final int CENHDR
  static const CENHDR1 = 46;

  /// from: static public final int CENHOW
  static const CENHOW1 = 10;

  /// from: static public final int CENLEN
  static const CENLEN1 = 24;

  /// from: static public final int CENNAM
  static const CENNAM1 = 28;

  /// from: static public final int CENOFF
  static const CENOFF1 = 42;

  /// from: static public final long CENSIG
  static const CENSIG1 = 33639248;

  /// from: static public final int CENSIZ
  static const CENSIZ1 = 20;

  /// from: static public final int CENTIM
  static const CENTIM1 = 12;

  /// from: static public final int CENVEM
  static const CENVEM1 = 4;

  /// from: static public final int CENVER
  static const CENVER1 = 6;

  /// from: static public final int ENDCOM
  static const ENDCOM1 = 20;

  /// from: static public final int ENDHDR
  static const ENDHDR1 = 22;

  /// from: static public final int ENDOFF
  static const ENDOFF1 = 16;

  /// from: static public final long ENDSIG
  static const ENDSIG1 = 101010256;

  /// from: static public final int ENDSIZ
  static const ENDSIZ1 = 12;

  /// from: static public final int ENDSUB
  static const ENDSUB1 = 8;

  /// from: static public final int ENDTOT
  static const ENDTOT1 = 10;

  /// from: static public final int EXTCRC
  static const EXTCRC1 = 4;

  /// from: static public final int EXTHDR
  static const EXTHDR1 = 16;

  /// from: static public final int EXTLEN
  static const EXTLEN1 = 12;

  /// from: static public final long EXTSIG
  static const EXTSIG1 = 134695760;

  /// from: static public final int EXTSIZ
  static const EXTSIZ1 = 8;

  /// from: static public final int LOCCRC
  static const LOCCRC1 = 14;

  /// from: static public final int LOCEXT
  static const LOCEXT1 = 28;

  /// from: static public final int LOCFLG
  static const LOCFLG1 = 6;

  /// from: static public final int LOCHDR
  static const LOCHDR1 = 30;

  /// from: static public final int LOCHOW
  static const LOCHOW1 = 8;

  /// from: static public final int LOCLEN
  static const LOCLEN1 = 22;

  /// from: static public final int LOCNAM
  static const LOCNAM1 = 26;

  /// from: static public final long LOCSIG
  static const LOCSIG1 = 67324752;

  /// from: static public final int LOCSIZ
  static const LOCSIZ1 = 18;

  /// from: static public final int LOCTIM
  static const LOCTIM1 = 10;

  /// from: static public final int LOCVER
  static const LOCVER1 = 4;

  static final _id_ctor2 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/InputStream;)V");

  /// from: public void <init>(java.io.InputStream in)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new <code>JarInputStream</code> and reads the optional
  /// manifest. If a manifest is present, also attempts to verify
  /// the signatures if the JarInputStream is signed.
  ///@param in the actual input stream
  ///@exception IOException if an I/O error has occurred
  JarInputStream.ctor2(inputstream_.InputStream in0)
      : super.fromRef(jniAccessors
            .newObjectWithArgs(_classRef, _id_ctor2, [in0.reference]).object);

  static final _id_ctor4 = jniAccessors.getMethodIDOf(
      _classRef, r"<init>", r"(Ljava/io/InputStream;Z)V");

  /// from: public void <init>(java.io.InputStream in, boolean verify)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new <code>JarInputStream</code> and reads the optional
  /// manifest. If a manifest is present and verify is true, also attempts
  /// to verify the signatures if the JarInputStream is signed.
  ///@param in the actual input stream
  ///@param verify whether or not to verify the JarInputStream if
  /// it is signed.
  ///@exception IOException if an I/O error has occurred
  JarInputStream.ctor4(inputstream_.InputStream in0, bool verify)
      : super.fromRef(jniAccessors.newObjectWithArgs(
            _classRef, _id_ctor4, [in0.reference, verify ? 1 : 0]).object);

  static final _id_getManifest = jniAccessors.getMethodIDOf(
      _classRef, r"getManifest", r"()Ljava/util/jar/Manifest;");

  /// from: public java.util.jar.Manifest getManifest()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Returns the <code>Manifest</code> for this JAR file, or
  /// <code>null</code> if none.
  ///@return the <code>Manifest</code> for this JAR file, or
  ///         <code>null</code> if none.
  manifest_.Manifest getManifest() =>
      const manifest_.$ManifestType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getManifest, jni.JniCallType.objectType, []).object);

  static final _id_getNextEntry = jniAccessors.getMethodIDOf(
      _classRef, r"getNextEntry", r"()Ljava/util/zip/ZipEntry;");

  /// from: public java.util.zip.ZipEntry getNextEntry()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Reads the next ZIP file entry and positions the stream at the
  /// beginning of the entry data. If verification has been enabled,
  /// any invalid signature detected while positioning the stream for
  /// the next entry will result in an exception.
  ///@exception ZipException if a ZIP file error has occurred
  ///@exception IOException if an I/O error has occurred
  ///@exception SecurityException if any of the jar file entries
  ///         are incorrectly signed.
  zipentry_.ZipEntry getNextEntry() =>
      const zipentry_.$ZipEntryType().fromRef(jniAccessors.callMethodWithArgs(
          reference, _id_getNextEntry, jni.JniCallType.objectType, []).object);

  static final _id_getNextJarEntry = jniAccessors.getMethodIDOf(
      _classRef, r"getNextJarEntry", r"()Ljava/util/jar/JarEntry;");

  /// from: public java.util.jar.JarEntry getNextJarEntry()
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Reads the next JAR file entry and positions the stream at the
  /// beginning of the entry data. If verification has been enabled,
  /// any invalid signature detected while positioning the stream for
  /// the next entry will result in an exception.
  ///@return the next JAR file entry, or null if there are no more entries
  ///@exception ZipException if a ZIP file error has occurred
  ///@exception IOException if an I/O error has occurred
  ///@exception SecurityException if any of the jar file entries
  ///         are incorrectly signed.
  jarentry_.JarEntry getNextJarEntry() =>
      const jarentry_.$JarEntryType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_getNextJarEntry,
          jni.JniCallType.objectType, []).object);

  static final _id_read1 =
      jniAccessors.getMethodIDOf(_classRef, r"read", r"([BII)I");

  /// from: public int read(byte[] b, int off, int len)
  ///
  /// Reads from the current JAR file entry into an array of bytes.
  /// If <code>len</code> is not zero, the method
  /// blocks until some input is available; otherwise, no
  /// bytes are read and <code>0</code> is returned.
  /// If verification has been enabled, any invalid signature
  /// on the current entry will be reported at some point before the
  /// end of the entry is reached.
  ///@param b the buffer into which the data is read
  ///@param off the start offset in the destination array <code>b</code>
  ///@param len the maximum number of bytes to read
  ///@return the actual number of bytes read, or -1 if the end of the
  ///         entry is reached
  ///@exception NullPointerException If <code>b</code> is <code>null</code>.
  ///@exception IndexOutOfBoundsException If <code>off</code> is negative,
  /// <code>len</code> is negative, or <code>len</code> is greater than
  /// <code>b.length - off</code>
  ///@exception ZipException if a ZIP file error has occurred
  ///@exception IOException if an I/O error has occurred
  ///@exception SecurityException if any of the jar file entries
  ///         are incorrectly signed.
  int read1(jni.JArray<jni.JByte> b, int off, int len) =>
      jniAccessors.callMethodWithArgs(
          reference,
          _id_read1,
          jni.JniCallType.intType,
          [b.reference, jni.JValueInt(off), jni.JValueInt(len)]).integer;

  static final _id_createZipEntry = jniAccessors.getMethodIDOf(_classRef,
      r"createZipEntry", r"(Ljava/lang/String;)Ljava/util/zip/ZipEntry;");

  /// from: protected java.util.zip.ZipEntry createZipEntry(java.lang.String name)
  /// The returned object must be deleted after use, by calling the `delete` method.
  ///
  /// Creates a new <code>JarEntry</code> (<code>ZipEntry</code>) for the
  /// specified JAR file entry name. The manifest attributes of
  /// the specified JAR file entry name will be copied to the new
  /// <CODE>JarEntry</CODE>.
  ///@param name the name of the JAR/ZIP file entry
  ///@return the <code>JarEntry</code> object just created
  zipentry_.ZipEntry createZipEntry(jni.JString name) =>
      const zipentry_.$ZipEntryType().fromRef(jniAccessors.callMethodWithArgs(
          reference,
          _id_createZipEntry,
          jni.JniCallType.objectType,
          [name.reference]).object);
}

class $JarInputStreamType extends jni.JObjType<JarInputStream> {
  const $JarInputStreamType();

  @override
  String get signature => r"Ljava/util/jar/JarInputStream;";

  @override
  JarInputStream fromRef(jni.JObjectPtr ref) => JarInputStream.fromRef(ref);
}
